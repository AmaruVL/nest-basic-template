{
  "Console log": {
    "prefix": "qlog",
    "body": "console.log($1)",
    "description": "Log output to console"
  },
  "DB constructor": {
    "prefix": "qdb",
    "description": "Database constructor",
    "scope": "typescript",
    "body": "constructor(private readonly dbService: DatabaseService) {}$0",
  },
  "DTO template": {
    "prefix": "qdto",
    "description": "DTO template",
    "scope": "typescript",
    "body": [
      "import { IsString } from 'class-validator'\n",
      "export class ${TM_FILENAME/([^.]+).*/${1:/pascalcase}/}Dto {",
      "\t@IsString()",
      "\t${1:property}: string",
      "}",
    ],
  },
  "Service template": {
    "prefix": "qser",
    "description": "Service template",
    "scope": "typescript",
    "body": [
      "import { Injectable } from '@nestjs/common'",
      "import { DatabaseService } from 'src/core'\n",
      "@Injectable()",
      "export class ${TM_FILENAME/([^.]+).*/${1:/pascalcase}/}Service {",
      "\tconstructor(private readonly dbService: DatabaseService) {}\n",
      "\tasync ${1:findOne}($2) {",
      "\t\treturn await this.dbService$0",
      "\t}",
      "}",
    ],
  },
  "Common controller import": {
    "prefix": "qcci",
    "description": "Common controller import",
    "scope": "typescript",
    "body": [
      "import { Controller, Body, Param } from '@nestjs/common'",
      "import { Get, Post, Patch, Delete } from 'src/common'",
    ],
  },
    "Get controller template": {
    "prefix": "qget",
    "description": "Get controller template",
    "scope": "typescript",
    "body": [
      "@Get('get', { summary: '${0:Get all values}' })",
      "${1:nameFunction}() {",
      "  return this.${TM_FILENAME/([^.]+).*/${1:/camelcase}/}Service.${1:nameFunction}()",
      "}",
    ],
  },
  "Get by Id controller template": {
    "prefix": "qgetid",
    "description": "Get by Id controller template",
    "scope": "typescript",
    "body": [
      "@Get('get/:${2:id}', { summary: '${0:Get a value by Id}' })",
      "${1:nameFunction}(@Param('${2:id}') ${2:id}: string) {",
      "  return this.${TM_FILENAME/([^.]+).*/${1:/camelcase}/}Service.${1:nameFunction}(+${2:id})",
      "}",
    ],
  },
  "Post controller template": {
    "prefix": "qpost",
    "description": "Post controller template",
    "scope": "typescript",
    "body": [
      "@Post('create', { summary: '${0:Create a value}' })",
      "${1:nameFunction}(@Body() dto: nameDto) {",
      "  return this.${TM_FILENAME/([^.]+).*/${1:/camelcase}/}Service.${1:nameFunction}(dto)",
      "}",
    ],
  },
  "Patch controller template": {
    "prefix": "qpatch",
    "description": "Patch controller template",
    "scope": "typescript",
    "body": [
      "@Patch('update/:${2:id}', { summary: '${0:Update a value by Id}' })",
      "${1:nameFunction}(@Param('${2:id}') ${2:id}: string, @Body() dto: nameDto) {",
      "  return this.${TM_FILENAME/([^.]+).*/${1:/camelcase}/}Service.${1:nameFunction}(+${2:id}, dto)",
      "}",
    ],
  },
  "Delete controller template": {
    "prefix": "qdel",
    "description": "Delete controller template",
    "scope": "typescript",
    "body": [
      "@Delete('delete/:${2:id}', { summary: '${0:Delete a value by Id}' })",
      "${1:nameFunction}(@Param('${2:id}') ${2:id}: string) {",
      "  return this.${TM_FILENAME/([^.]+).*/${1:/camelcase}/}Service.${1:nameFunction}(+${2:id})",
      "}",
    ],
  },
  "Seed Prisma": {
    "prefix": "qseed",
    "description": "Create a seed from file name",
    "body": [
      "import { Prisma } from '@prisma/client'\n",
      "export const ${1:tableName}: Prisma.${1/(.*)/${1:/capitalize}/}UncheckedCreateInput[] = [{$0}]"
    ]
  }
}